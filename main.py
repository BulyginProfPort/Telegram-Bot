from cgitb import text
from requests import request
import config
import logging
from aiogram.utils.callback_data import CallbackData
from aiogram import Bot, Dispatcher, executor,types
from pars import parse

rating = 0.0
places = []
city1 = "/{}"
city2 = ""
deliverytime = 0

callBackInfo = CallbackData("city","kitchen")

bot = Bot(token = config.TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
deliverytime = 0.0

@dp.message_handler(commands = "special_buttons")
async def comandSpecialButtons(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)
    keyboard.add(types.KeyboardButton(text = "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location = True))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup = keyboard)


@dp.message_handler(commands = "start")
async def welcome(message: types.Message ):
    markup = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton(text = "–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É üê¢",callback_data='order')
    markup.add(item1)
    sti = open('/Users/fedorbulygin/Desktop/Project/sticker.webp','rb') 
    await message.answer_sticker(sti)   
    await message.answer(text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ú–ò–§–ò –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –µ–¥—ã!",reply_markup=markup)

@dp.callback_query_handler(text = "order")
async def callBackProcess(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    geoKey = types.ReplyKeyboardMarkup(row_width=2,resize_keyboard=True)
    geoKey.add(types.KeyboardButton(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location = True))
    buttons=[ 
        types.InlineKeyboardButton(text = "–ú–æ—Å–∫–≤–∞",callback_data = 'city_moscow'),
        types.InlineKeyboardButton(text = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",callback_data = 'city_spb'),
        types.InlineKeyboardButton(text = "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",callback_data = 'city_ekb'),
    ]
    cityKeyboard = types.InlineKeyboardMarkup(row_width=2) 
    cityKeyboard.add(*buttons)
    await callback_query.message.answer(text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",reply_markup = cityKeyboard)
    await callback_query.message.answer(text = "–Ø –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –∑–∞ —Ç–µ–±—è. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",reply_markup = geoKey)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('city_'))
async def callbacks_city(callback_query: types.CallbackQuery ):
    #–û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ callback
    await bot.answer_callback_query(callback_query.id)
    global city1
    global city2
    city2 = callback_query.data[5:len(callback_query.data)]
    city1 = city1.format(city2)
    callback_query_id = callback_query.id
    parse(city1,places)
    
    rateKey = types.InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
    buttons = [
        types.InlineKeyboardButton(text = "–û—Ç 4.0", callback_data='_r4.0'),
        types.InlineKeyboardButton(text = "–û—Ç 4.1", callback_data='_r4.1'),
        types.InlineKeyboardButton(text = "–û—Ç 4.2", callback_data='_r4.2'),
        types.InlineKeyboardButton(text = "–û—Ç 4.3", callback_data='_r4.3'),
        types.InlineKeyboardButton(text = "–û—Ç 4.4", callback_data='_r4.4'),
        types.InlineKeyboardButton(text = "–û—Ç 4.5", callback_data='_r4.5'),
        types.InlineKeyboardButton(text = "–û—Ç 4.6", callback_data='_r4.6'),
        types.InlineKeyboardButton(text = "–û—Ç 4.7", callback_data='_r4.7'),
        types.InlineKeyboardButton(text = "–û—Ç 4.8", callback_data='_r4.8'),
        types.InlineKeyboardButton(text = "–û—Ç 4.9", callback_data='_r4.9'),
        types.InlineKeyboardButton(text = "–û—Ç 5.0", callback_data='_r5.0')
    ]
    rateKey.add(*buttons)
    await callback_query.message.answer(text = "–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞?",reply_markup = rateKey)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('_r'))
async def setRating(callback_query: types.CallbackQuery ):
    global rating
    rating = float(callback_query.data[2:])
    print(rating)
    timeKey = types.InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
    buttons = [
        types.InlineKeyboardButton(text = "–î–æ 30 –º–∏–Ω—É—Ç",callback_data='_t40'),
        types.InlineKeyboardButton(text = "–î–æ 45 –º–∏–Ω—É—Ç",callback_data='_t55'),
        types.InlineKeyboardButton(text = "–î–æ 1 —á–∞—Å–∞",callback_data='_t95'),
        types.InlineKeyboardButton(text = "–î–æ 90 –º–∏–Ω—É—Ç",callback_data='_t120'),
        types.InlineKeyboardButton(text = "–î–æ 2 —á–∞—Å–æ–≤",callback_data='_t240')
    ]
    timeKey.add(*buttons)
    await callback_query.message.answer(text = "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –∂–¥–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?",reply_markup= timeKey)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('_t'))
async def setRating(callback_query: types.CallbackQuery):
    global deliverytime
    global places
    deliverytime = int(callback_query.data[2:])
    print(deliverytime)
    if (city2 == "moscow"):
        await callback_query.message.answer(text = "–°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –ú–æ—Å–∫–≤–µ: ")
        for place in places:
            if (place['rate'] == "–ú–∞–ª–æ –æ—Ü–µ–Ω–æ–∫"):
                break
            if ( rating <= (float(place['rate'])  ) and (  deliverytime >= int(place['time'][3:5])) ):
                print("|",place['title'],"|",place['link'],"|","|",place['rate'],"|",place['time'])
                await callback_query.message.answer(text = (place['title']+'\n'+"–†–µ–π—Ç–∏–Ω–≥: "+place['rate']+'\n'+"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ~"+place['time']+'\n'+place['link']) )


    elif (city2 == "spb"):
        await callback_query.message.answer(text = "–°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ:")
        for place in places:
            if (place['rate'] == "–ú–∞–ª–æ –æ—Ü–µ–Ω–æ–∫"):
                break
            if ( rating <= (float(place['rate'])  ) and (  deliverytime >= int(place['time'][3:5])) ):
                print("|",place['title'],"|",place['link'],"|","|",place['rate'],"|",place['time'])
                await callback_query.message.answer(text = (place['title']+'\n'+"–†–µ–π—Ç–∏–Ω–≥: "+place['rate']+'\n'+"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ~"+place['time']+'\n'+place['link']) )

    elif (city2 == "ekb"):
        await callback_query.message.answer(text = "–°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ: ")
        for place in places:
            if (place['rate'] == "–ú–∞–ª–æ –æ—Ü–µ–Ω–æ–∫"):
                break
            if ( rating <= (float(place['rate'])  ) and (  deliverytime >= int(place['time'][3:5])) ):
                print("|",place['title'],"|",place['link'],"|","|",place['rate'],"|",place['time'])
                await callback_query.message.answer(text = (place['title']+'\n'+"–†–µ–π—Ç–∏–Ω–≥: "+place['rate']+'\n'+"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ~"+place['time']+'\n'+place['link']) )

@dp.message_handler(content_types = ["location"])
async def location(message):
    if message.location is not None:
        print("latitude: %s; longitude: %s" % (message.location.latitude, message.location.longitude))
        if ( (message.location.latitude > 55.0 and message.location.latitude < 65.0) and ( message.location.longitude > 35 and message.location.longitude < 45) ):
            print("–°–ó–ê–û")
            await message.answer(text = "–í–∞—à –≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞, –æ–∫—Ä—É–≥ –°–ó–ê–û")

executor.start_polling(dp, skip_updates=True)
